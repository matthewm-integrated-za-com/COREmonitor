<?php
	error_reporting(E_ALL);
	use PHPOnCouch\CouchClient;//php couch DB library as found at https://github.com/dready92/PHP-on-Couch
	$signal = $_POST["signal"];
	$fromIP = $_POST["IP"];
	//Include libraries
	{
		output("Including libraries");
		include "libraries/CouchLink/vendor/autoload.php";//needed to load phponcouch
	}
	//declare important Vars
	{
		output("Declaring important variables");
		$time = explode(" ",microtime());
		$now = $time[1]+$time[0];
		$couchDsn = "http://127.0.0.1:5984";//coucgh db settings, if neede these must be manually changed as per documentation provided at https://github.com/dready92/PHP-on-Couch
		$signalsDB = "coremonitor_signals";
		$configDB = "coremonitor_config"; 
		$clientsDB = "coremonitor_clients";
		$usersDB = "coremonitor_users";
		$signalsClient = new CouchClient($couchDsn,$signalsDB);
		$configClient = new CouchClient($couchDsn,$configDB);
		$configClient = new CouchClient($couchDsn,$configDB);
		$usersClient = new CouchClient($couchDsn,$usersDB);
	}
	//split data received
	{
		output("splitting Signal");
		$signal = str_replace("\r\n","",$signal);
		$clientID = substr($signal,1,4);
		$qualifier = intval(substr($signal,7,1));
		$eventType = substr($signal,8,3);
		$partition = intval(substr($signal,11,2));
		$zone_user = intval(substr($signal,13,3));
	}
	//test if signal should be created
	{
		output("testing if signal should be created");
		output("Retrieving Event Types from configuration Database");
		$eventTypes = $configClient -> getDoc("eventTypes");
		$interpereters = $eventTypes -> contactID -> eventTypes;
		output("testing if signal has an interpereter");
		error_reporting(!E_WARNING);//Expected Error: Notice: Undefined property: stdClass::
		if(!is_null($interpereters -> $eventType))
		{
			error_reporting(E_ALL);
			output("signal has an interpereter, Testing for Dual signal");
			if($interpereters -> $eventType -> dualSignal)
			{
				output("event is a dual Signal,testing to see if signal should be created");
				$createSignal = $interpereters -> $eventType -> dualSignalQualifiers -> $qualifier -> createSignal;
				if($createSignal)
				{
					output("Signal should be created");
					$eventName = $interpereters -> $eventType -> dualSignalQualifiers -> $qualifier -> name;
					$createActivation = $interpereters -> $eventType -> dualSignalQualifiers -> $qualifier -> createActivation;
					$assignedActionPlan = $interpereters -> $eventType -> dualSignalQualifiers -> $qualifier -> assignedActionPlan;
				}
			}
			else
			{
				output("event is not Dual Signal");
				$createSignal = $interpereters -> $eventType -> createSignal;
				if($createSignal)
				{
					output("Signal should be created");
					$eventName = $interpereters -> $eventType -> name;
					$createActivation = $interpereters -> $eventType -> createActivation;
					$assignedActionPlan = $interpereters -> $eventType -> assignedActionPlan;
				}
			}
		}
		else
		{
			error_reporting(E_ALL);
			output("signal has no interpereter, Creating Unknown event Signal");
			$createSignal = true;
			$eventName = "Unknown Event Signal";
			$createActivation = true;
			$assignedActionPlan = "Configuration Error";
		}
	}
	//store Data to Daabase
	if($createSignal)
	{
		output("Saving Signal To Database");
		$signalID = strval($now);
		$doc = new stdClass();
		$doc -> _id = $signalID;
		$doc -> timestamp = $now;
		$doc -> dateTime = date('d/m/Y @ H:i:s',$now);
		$doc -> convertedToActivation = false;
		$doc -> rawData = $signal;
		error_reporting(!E_WARNING);//expected error: creating empty object
		$doc -> signal -> clientID = $clientID;
		error_reporting(E_ALL);
		$doc -> signal -> qualifier = $qualifier;
		$doc -> signal -> eventType = $eventType;
		$doc -> signal -> partition = $partition;
		$doc -> signal -> zone_user = $zone_user;
		$doc -> signal -> eventName = $eventName;
		$doc -> signal -> createActivation = $createActivation;
		$doc -> signal -> assignedActionPlan = $assignedActionPlan;
		$doc -> signal -> fromIP = $fromIP;
		$signalsClient -> storeDoc($doc);
	}
	//create Activations
	{
		output("Creating Activations");
		
		curl("http://192.168.0.35/createActivations.php","signalID=$signalID");
	}
	//functions
	{
		function output($string)
		{
			$time = explode(" ",microtime());
			$now = $time[1]+$time[0];
//			echo "[$now MEM:" . (memory_get_usage()/1024/1024) . "mb] -> $string<br>";
//			ob_flush(); # http://php.net/ob_flush
//			flush(); # http://php.net/flush
		}
		function store($print)
		{
		    fopen('print.txt', 'w');
		    file_put_contents('print.txt',print_r($print, true));
		}
		function curl($host,$data)//Data to be put in the format $data = "Hello=World&John=Travolta&...=..."
		{
			// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
			$ch = curl_init();
			
			curl_setopt($ch, CURLOPT_URL, $host);
			if(!is_null($data))
			{
				curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
			}
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($ch, CURLOPT_POST, 1);
			
			$result = curl_exec($ch);
			if (curl_errno($ch)) {
				echo 'Error:' . curl_error($ch);
			}
var_dump($result);
			curl_close ($ch);
		}
	}
?>